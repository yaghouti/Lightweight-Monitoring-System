{
  "stats": {
    "suites": 2,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2021-06-04T21:36:02.112Z",
    "end": "2021-06-04T21:36:02.591Z",
    "duration": 479,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3d9c2fba-066e-41bb-8bf0-3d1fe638a635",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "689445a7-0c9a-462b-8588-44285dca61cf",
          "title": "User Group",
          "fullFile": "F:\\Apply\\Sensory Minds\\Lightweight Monitoring System\\tests\\mochaTests.js",
          "file": "\\mochaTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should add a user group",
              "fullTitle": "User Group Should add a user group",
              "timedOut": false,
              "duration": 124,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  let response = await axios.post(\n    serverUrl + '/userGroups',\n    testUserGroup\n  );\n  assert.deepEqual(response.data, {\n    \"message\": `User group '${testUserGroup.name}' created.`\n  });\n}\ncatch (e) {\n  throw new Error(e);\n}",
              "err": {},
              "uuid": "ed612367-b137-4b0a-9af0-743ae3bae425",
              "parentUUID": "689445a7-0c9a-462b-8588-44285dca61cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should get user groups",
              "fullTitle": "User Group Should get user groups",
              "timedOut": false,
              "duration": 112,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  let response = await axios.get(serverUrl + '/userGroups');\n  assert.typeOf(response.data.groups, 'array');\n  response.data.groups.forEach(group => {\n    assert.hasAllKeys(group, [\n      'name', 'emails'\n    ]);\n  });\n}\ncatch (e) {\n  throw new Error(e);\n}",
              "err": {},
              "uuid": "bc6bb8e1-4f13-4225-8700-ff57c677dd54",
              "parentUUID": "689445a7-0c9a-462b-8588-44285dca61cf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ed612367-b137-4b0a-9af0-743ae3bae425",
            "bc6bb8e1-4f13-4225-8700-ff57c677dd54"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 236,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "87a29fd8-0bbb-4469-8938-5248bc7c4bee",
          "title": "Tracker",
          "fullFile": "F:\\Apply\\Sensory Minds\\Lightweight Monitoring System\\tests\\mochaTests.js",
          "file": "\\mochaTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should add a tracker",
              "fullTitle": "Tracker Should add a tracker",
              "timedOut": false,
              "duration": 74,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  let response = await axios.post(\n    serverUrl + '/trackers',\n    testTracker\n  );\n  assert.deepEqual(response.data, {\n    \"message\": `Tracker for URL: '${testTracker.url}' created.`\n  });\n}\ncatch (e) {\n  throw new Error(e);\n}",
              "err": {},
              "uuid": "427905a9-5f06-4710-a632-ffaee986b65d",
              "parentUUID": "87a29fd8-0bbb-4469-8938-5248bc7c4bee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should get trackers",
              "fullTitle": "Tracker Should get trackers",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  let response = await axios.get(serverUrl + '/trackers');\n  assert.typeOf(response.data.trackers, 'array');\n  response.data.trackers.forEach(tracker => {\n    assert.hasAllKeys(tracker, [\n      'url', 'interval', 'loadingTimeThreshold', 'userGroups'\n    ]);\n  });\n}\ncatch (e) {\n  throw new Error(e);\n}",
              "err": {},
              "uuid": "4adb13e6-0454-49f7-9bed-6b20892dbe4c",
              "parentUUID": "87a29fd8-0bbb-4469-8938-5248bc7c4bee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should get tracking data",
              "fullTitle": "Tracker Should get tracking data",
              "timedOut": false,
              "duration": 95,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  let response = await axios.get(serverUrl + '/trackers/data');\n  assert.typeOf(response.data, 'array');\n  response.data.forEach(tracker => {\n    assert.hasAllKeys(tracker, [\n      'url', 'time', 'loadingTime', 'statusCode'\n    ]);\n  });\n}\ncatch (e) {\n  throw new Error(e);\n}",
              "err": {},
              "uuid": "7d78a0f4-bd82-452c-95b8-5b7abd589f96",
              "parentUUID": "87a29fd8-0bbb-4469-8938-5248bc7c4bee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "427905a9-5f06-4710-a632-ffaee986b65d",
            "4adb13e6-0454-49f7-9bed-6b20892dbe4c",
            "7d78a0f4-bd82-452c-95b8-5b7abd589f96"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 214,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}